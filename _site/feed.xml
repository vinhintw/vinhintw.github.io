<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-01-02T00:59:00+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Vinh Ng</title><subtitle>A personal website of &lt;a href=&quot;https://vinhintw.github.io/about&quot; target=&quot;&quot;&gt;Vinh Ng&lt;/a&gt;, containing technical blog on technology.</subtitle><author><name>Vinh Ng</name><email>vinhintw2014@gmail.com</email></author><entry><title type="html">Introduction to Machine Learning</title><link href="http://localhost:4000/2024/01/01/intoduction-to-Machine-Learning/" rel="alternate" type="text/html" title="Introduction to Machine Learning" /><published>2024-01-01T00:00:00+08:00</published><updated>2024-01-01T00:00:00+08:00</updated><id>http://localhost:4000/2024/01/01/intoduction-to-Machine-Learning</id><content type="html" xml:base="http://localhost:4000/2024/01/01/intoduction-to-Machine-Learning/"><![CDATA[<p>In today’s era, the power of <strong>AI - Artificial Intelligence</strong>, and more specifically <strong>Machine Learning</strong>, has sparked an incessant technological wave spreading everywhere. It’s not just a hot topic within academic circles; it has extended its reach, dominating the industrial world. Leading technology conglomerates like Google, Facebook, Microsoft, and promising startups are heavily investing in this field. This has led to the emergence of a myriad of innovative applications, not confined solely to computer science but also transcending into other fields like physics, chemistry, medicine, and even politics.</p>

<p>The pinnacle of Machine Learning’s extraordinary power can be witnessed through AlphaGo, an immensely intelligent machine capable of computations in a space larger than the number of particles in the universe. It not only surpassed any grandmaster but also emphasized the superiority of Machine Learning over traditional methods.</p>

<p>However, this is just a limited view of the proliferation of Artificial Intelligence. In reality, AI - Artificial Intelligence, and more specifically, Machine Learning, have marked a significant stride in the fourth industrial revolution. This technology doesn’t just limit itself to some prominent applications like Google and Tesla’s self-driving cars, Netflix’s movie recommendation system, Facebook’s facial recognition system, Apple’s virtual assistant Siri, and most recently, OpenAI’s ChatGPT, but it also opens an infinite space for its application. From <a href="https://www.facebook.com/zuck/posts/10103351073024591">Jarvis - Mark Zuckerberg’s intelligent home assistant</a> to a plethora of other AI/Machine Learning applications, they have adjusted and improved our lives in an undeniable manner.</p>

<p>Based on the definition provided by ChatGPT language model, <em>Machine learning is a field of artificial intelligence focused on developing algorithms and models that can learn from data to make predictions, recognize patterns, and discover structures without being explicitly programmed for every task</em>. It can be said that the primary purpose of Machine Learning is to enable computers to have some basic cognitive abilities similar to humans:</p>
<ol>
  <li>Listening, seeing, understanding language, solving problems, programming, etc.</li>
  <li>Assisting humans in handling the enormous amount of information we face daily, also known as Big Data.</li>
</ol>

<p>Indeed, <strong>Big Data</strong> is not just a simple scientific field. It is a common term put forward by the media to indicate the explosion of data in today’s era. It’s no different from terms like the “industrial revolution” or the “software age.” Big Data is the natural result of the robust development of the Internet, with social networks like Facebook, Instagram, Twitter contributing to the increased need for sharing information. Even YouTube, a platform where people share videos and interact through comments, can be considered a social network.</p>

<p>To comprehend the scale of Big Data, consider these figures (as of the time of writing):</p>
<ul>
  <li>Nearly 300 hours of video are uploaded to YouTube every minute (according to <a href="https://www.youtube.com/yt/press/statistics.html">https://www.youtube.com/yt/press/statistics.html</a>).</li>
  <li>Over 900 million people use Facebook daily, with 82.8% of these users coming from outside the US and Canada (according to <a href="http://newsroom.fb.com/company-info/">http://newsroom.fb.com/company-info/</a>).</li>
  <li>Google processes about 100 billion searches each month, equivalent to 3.3 billion searches per day and 38,000 searches per second. Remarkably, these numbers are constantly increasing every second! (according to <a href="http://www.internetlivestats.com/google-search-statistics/">http://www.internetlivestats.com/google-search-statistics/</a>).</li>
</ul>

<p>However, the information explosion is not the sole reason for the emergence of Big Data. Although Big Data has only appeared in recent years, the accumulated data from the inception of the Internet at the end of the previous century was substantial. Initially, humans only knew how to store and copy data without knowing how to use it. However, one day, scientists realized that within that data lay an immense amount of knowledge - knowledge that could help us understand humans and society more deeply.</p>

<p>From a user’s list of favorite movies, we can infer their preferences and suggest movies they might not have seen but are compatible with those preferences. From the search history of the online community, we can identify emerging issues and focus on developing more information about those issues. The emergence of Big Data truly began when we realized the value of hidden information in data and had the resources and technology to exploit them on a large scale. It’s no surprise that machine learning plays a significant role in this technology. The relationship between machine learning and Big Data is a mutually supportive link: machine learning advances due to the enhancement of data volume from Big Data, and conversely, the value of Big Data depends on the ability to extract knowledge from data using machine learning.</p>

<p>Machine learning is not a novel concept; in fact, it has existed long before the Internet emerged. One of the earliest machine learning algorithms was the perceptron, developed by Frank Rosenblatt in 1957. This algorithm was useful in classifying two different concepts. An illustration of its application is in classifying spam emails (represented by a triangle) and regular emails (represented by a square). This often posed difficulties in visualizing how this classification should be done. The perceptron accomplishes this by creating a straight line on the plane to divide the two sets of points.</p>
<div style="align-items: center; justify-content: center; max-width: 50%; max-height: 50%;">
<img class="image" src="/public/post-assets/MachineLearning/introduction/classification1.png" alt="Image" />
</div>

<p>The triangle and square points represent emails labeled beforehand and are used to “train” the perceptron. Once the dividing line for the two sets of points is drawn, the perceptron can label the unlabeled points representing emails needing classification.</p>

<p>The email classification process is described as follows: Firstly, we need an algorithm to convert emails into data. This step is crucial because if we can choose an appropriate representation, the perceptron will work much more effectively. Next, the perceptron will use information from each data point to update the parameters of the line it’s trying to find. You can take a look at a perceptron demo (green dots represent the points the perceptron is handling).</p>

<div style="text-align:center;">
<iframe width="95%" height="500" src="https://www.youtube.com/embed/vGwemZhPlsA?si=mDIm0mZk0jCjeflF" frameborder="0" allowfullscreen=""></iframe>
<div class="thecap">Perceptron algorithm</div>
</div>

<p>However, because this is a relatively simple algorithm, it may encounter several issues, such as points to classify lying on the dividing line or in more complex datasets, where no straight dividing line exists.</p>
<div style="align-items: center; justify-content: center; max-width: 50%; max-height: 50%;">
<img class="image" src="/public/post-assets/MachineLearning/introduction/clasification-hard.png" alt="Image" />
</div>

<p>This necessitates non-linear separation methods. But that’s a different story.</p>

<p>The perceptron is a <strong>supervised learning</strong> algorithm: we provide the computer with examples along with the correct answers, hoping the computer will learn and predict for unknown examples in the future. There are also machine learning algorithms that don’t require the correct answers, known as <strong>unsupervised learning</strong>. In this case, the computer tries to discover hidden structures within the dataset without needing correct answers. Another type of machine learning is <strong>reinforcement learning</strong>. In this form, the computer doesn’t receive correct answers but instead receives feedback for each action and adjusts its behavior based on positive or negative feedback. I will delve deeper into reinforcement learning and learning methods in another post.</p>

<p>Next, I’d like to introduce a bit about <strong>deep learning</strong>. In recent years, with remarkable advancements in computing capabilities and the accumulation of enormous data from leading technology conglomerates, the field of Machine Learning has advanced further, opening up a new realm called Deep Learning. Deep Learning has enabled computers to perform tasks that seemed impossible ten years ago: from classifying thousands of different objects in images, automatically captioning images, simulating human speech and handwriting, to interacting with humans, and even composing literature or music. (See more: <a href="http://machinelearningmastery.com/inspirational-applications-deep-learning/">8 Inspirational Applications of Deep Learning</a>)</p>

<hr />

<div class="imgcap">
<div>
    <img src="/public/post-assets/MachineLearning/introduction/title.png" width="800" />
</div>
<div class="thecap">The relationship between AI, Machine Learning, and Deep Learning. <br /> (Source: <a href="https://blogs.nvidia.com/blog/2016/07/29/whats-difference-artificial-intelligence-machine-learning-deep-learning-ai/">What’s the Difference Between Artificial Intelligence, Machine Learning, and Deep Learning?</a>)</div>
</div>
<hr />

<h2 id="further-reading">Further Reading</h2>

<h3 id="courses">Courses</h3>

<h4 id="english">English</h4>
<ol>
  <li><a href="https://www.coursera.org/learn/machine-learning">Machine Learning by Andrew Ng on Coursera</a> (<em>Most renowned course on Machine Learning</em>)</li>
  <li><a href="https://www.udacity.com/course/deep-learning--ud730">Deep Learning by Google on Udacity</a> (<em>An advanced course on Deep Learning with Tensorflow</em>)</li>
  <li><a href="http://machinelearningmastery.com/">Machine Learning mastery</a> (<em>Fundamental Machine Learning algorithms</em>)</li>
</ol>]]></content><author><name>Vinh Ng</name><email>vinhintw2014@gmail.com</email></author><summary type="html"><![CDATA[In today’s era, the power of AI - Artificial Intelligence, and more specifically Machine Learning, has sparked an incessant technological wave spreading everywhere. It’s not just a hot topic within academic circles; it has extended its reach, dominating the industrial world. Leading technology conglomerates like Google, Facebook, Microsoft, and promising startups are heavily investing in this field. This has led to the emergence of a myriad of innovative applications, not confined solely to computer science but also transcending into other fields like physics, chemistry, medicine, and even politics.]]></summary></entry><entry><title type="html">Double Linked List in Java</title><link href="http://localhost:4000/2023/11/08/double-linked-list/" rel="alternate" type="text/html" title="Double Linked List in Java" /><published>2023-11-08T00:00:00+08:00</published><updated>2023-11-08T00:00:00+08:00</updated><id>http://localhost:4000/2023/11/08/double-linked-list</id><content type="html" xml:base="http://localhost:4000/2023/11/08/double-linked-list/"><![CDATA[<h1 id="introduction">Introduction</h1>

<p>In computer science, a double linked list is a versatile data structure that allows efficient insertion, deletion, and traversal of elements. Unlike a single linked list, a double linked list consists of nodes where each node has two pointers: one that points to the next node, and another that points to the previous node. In this blog post, we’ll explore the implementation of a double linked list in Java.</p>

<h2 id="what-is-a-double-linked-list">What is a Double Linked List?</h2>

<p>A double linked list is a data structure composed of nodes. Each node contains two references or pointers: one that points to the previous node and another that points to the next node. This bidirectional connectivity allows for easy traversal in both forward and backward directions. Here are some key characteristics of a double linked list:</p>

<ul>
  <li>Bidirectional: Each node in the list points to both the next and previous nodes.</li>
  <li>Dynamic: The list can grow or shrink as elements are added or removed.</li>
  <li>Efficient Insertions and Deletions: Adding or removing elements at the beginning, middle, or end of the list can be done efficiently.</li>
</ul>

<h2 id="implementing-a-double-linked-list-in-java">Implementing a Double Linked List in Java</h2>

<p>Let’s dive into the implementation of a double linked list in Java. We’ll cover various operations and methods for working with this data structure. For our implementation, we’ll create a class called <code class="language-plaintext highlighter-rouge">DoubleLinkedList</code> with the following key methods:</p>

<ol>
  <li><code class="language-plaintext highlighter-rouge">size()</code>: Returns the number of elements in the list.</li>
  <li><code class="language-plaintext highlighter-rouge">isEmpty()</code>: Checks if the list is empty.</li>
  <li><code class="language-plaintext highlighter-rouge">valueAt(index)</code>: Returns the value of the element at a given index.</li>
  <li><code class="language-plaintext highlighter-rouge">pushFront(value)</code>: Adds an item to the front of the list.</li>
  <li><code class="language-plaintext highlighter-rouge">popFront()</code>: Removes the front item and returns its value.</li>
  <li><code class="language-plaintext highlighter-rouge">pushBack(value)</code>: Adds an item to the end of the list.</li>
  <li><code class="language-plaintext highlighter-rouge">popBack()</code>: Removes the end item and returns its value.</li>
  <li><code class="language-plaintext highlighter-rouge">front()</code>: Returns the value of the front item.</li>
  <li><code class="language-plaintext highlighter-rouge">back()</code>: Returns the value of the end item.</li>
  <li><code class="language-plaintext highlighter-rouge">insert(index, value)</code>: Inserts a value at the specified index.</li>
  <li><code class="language-plaintext highlighter-rouge">erase(index)</code>: Removes a node at the given index.</li>
  <li><code class="language-plaintext highlighter-rouge">search(value)</code>: Searches the list and returns an array of indexes where the value is found.</li>
  <li><code class="language-plaintext highlighter-rouge">clear()</code>: Empties the list.</li>
  <li><code class="language-plaintext highlighter-rouge">toString()</code>: Return all data of list.</li>
</ol>

<h2 id="implementation">Implementation</h2>

<p>Let’s start with the Node class</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//ListNode class, each node has data and the reference to the next node and previous node</span>
<span class="kd">class</span> <span class="nc">Node</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="no">T</span> <span class="n">data</span><span class="o">;</span>
    <span class="nc">Node</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">next</span><span class="o">;</span>
    <span class="nc">Node</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">prev</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">Node</span><span class="o">(</span><span class="no">T</span> <span class="n">data</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">data</span> <span class="o">=</span> <span class="n">data</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">prev</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>and the Double Link List class</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">DoubleLinkedList</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;{</span>
    <span class="kd">private</span> <span class="nc">Node</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">head</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">Node</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">tail</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">size</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">DoubleLinkedList</span><span class="o">(){</span>
        <span class="n">head</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
        <span class="n">tail</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
        <span class="n">size</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
    <span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">size</span><span class="o">(){</span>
            <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">size</span><span class="o">;</span>
        <span class="o">}</span>
</code></pre></div></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isEmpty</span><span class="o">(){</span>
            <span class="k">return</span> <span class="n">size</span> <span class="o">==</span> <span class="mi">0</span><span class="o">;</span>
        <span class="o">}</span>
</code></pre></div></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="c1">//return the value of the nth element, index start at 0</span>
    <span class="kd">public</span> <span class="no">T</span> <span class="nf">valueAt</span><span class="o">(</span><span class="kt">int</span> <span class="n">index</span><span class="o">){</span>
        <span class="k">if</span><span class="o">(</span><span class="n">index</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">index</span> <span class="o">&gt;=</span> <span class="n">size</span><span class="o">){</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">IndexOutOfBoundsException</span><span class="o">(</span><span class="s">"Index out of bounds"</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="nc">Node</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">current</span> <span class="o">=</span> <span class="n">head</span><span class="o">;</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">index</span><span class="o">;</span> <span class="n">i</span><span class="o">++){</span>
            <span class="n">current</span> <span class="o">=</span> <span class="n">current</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">current</span><span class="o">.</span><span class="na">data</span><span class="o">;</span>
    <span class="o">}</span>

</code></pre></div></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="c1">//"push an item to the front of the list"</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">pushFront</span><span class="o">(</span><span class="no">T</span> <span class="n">value</span><span class="o">){</span>
        <span class="nc">Node</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">newNode</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Node</span><span class="o">&lt;&gt;(</span><span class="n">value</span><span class="o">);</span>
        <span class="n">newNode</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">head</span><span class="o">;</span>
        <span class="n">newNode</span><span class="o">.</span><span class="na">prev</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">head</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">head</span><span class="o">.</span><span class="na">prev</span> <span class="o">=</span> <span class="n">newNode</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="n">head</span> <span class="o">=</span> <span class="n">newNode</span><span class="o">;</span>
        <span class="k">if</span><span class="o">(</span><span class="n">isEmpty</span><span class="o">()){</span>
            <span class="n">tail</span> <span class="o">=</span> <span class="n">head</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="n">size</span><span class="o">++;</span>
    <span class="o">}</span>
</code></pre></div></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="c1">//"add item to end of list"</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">pushBack</span><span class="o">(</span><span class="no">T</span> <span class="n">value</span><span class="o">){</span>
        <span class="nc">Node</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">newNode</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Node</span><span class="o">&lt;&gt;(</span><span class="n">value</span><span class="o">);</span>
        <span class="n">newNode</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
        <span class="n">newNode</span><span class="o">.</span><span class="na">prev</span> <span class="o">=</span> <span class="n">tail</span><span class="o">;</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">tail</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">tail</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">newNode</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="n">tail</span> <span class="o">=</span> <span class="n">newNode</span><span class="o">;</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">isEmpty</span><span class="o">())</span> <span class="o">{</span>
            <span class="n">head</span> <span class="o">=</span> <span class="n">newNode</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="n">size</span><span class="o">++;</span>
    <span class="o">}</span>
</code></pre></div></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="c1">//"remove end item and return its value"</span>
    <span class="kd">public</span> <span class="no">T</span> <span class="nf">popBack</span><span class="o">(){</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">tail</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalStateException</span><span class="o">(</span><span class="s">"List is empty"</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="no">T</span> <span class="n">value</span> <span class="o">=</span> <span class="n">tail</span><span class="o">.</span><span class="na">data</span><span class="o">;</span>
        <span class="n">tail</span> <span class="o">=</span> <span class="n">tail</span><span class="o">.</span><span class="na">prev</span><span class="o">;</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">tail</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">tail</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="n">head</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="n">size</span><span class="o">--;</span>
        <span class="k">return</span> <span class="n">value</span><span class="o">;</span>
    <span class="o">}</span>
</code></pre></div></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="c1">//"remove front item and return its value"</span>
    <span class="kd">public</span> <span class="no">T</span> <span class="nf">popFront</span><span class="o">(){</span>
        <span class="k">if</span><span class="o">(</span><span class="n">head</span> <span class="o">==</span> <span class="kc">null</span><span class="o">){</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalStateException</span><span class="o">(</span><span class="s">"List is empty"</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="no">T</span> <span class="n">value</span> <span class="o">=</span> <span class="n">head</span><span class="o">.</span><span class="na">data</span><span class="o">;</span>
        <span class="n">head</span> <span class="o">=</span> <span class="n">head</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">head</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">head</span><span class="o">.</span><span class="na">prev</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="n">tail</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="n">size</span><span class="o">--;</span>
        <span class="k">return</span> <span class="n">value</span><span class="o">;</span>
    <span class="o">}</span>
</code></pre></div></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="c1">//get value of front item</span>
    <span class="kd">public</span> <span class="no">T</span> <span class="nf">front</span><span class="o">(){</span>
        <span class="k">if</span><span class="o">(</span><span class="n">head</span> <span class="o">==</span> <span class="kc">null</span><span class="o">){</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalStateException</span><span class="o">(</span><span class="s">"List is empty"</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">head</span><span class="o">.</span><span class="na">data</span><span class="o">;</span>
    <span class="o">}</span>
</code></pre></div></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="c1">//get value of end item</span>
    <span class="kd">public</span> <span class="no">T</span> <span class="nf">back</span><span class="o">(){</span>
        <span class="k">if</span><span class="o">(</span><span class="n">tail</span> <span class="o">==</span> <span class="kc">null</span><span class="o">){</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalStateException</span><span class="o">(</span><span class="s">"List is empty"</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">tail</span><span class="o">.</span><span class="na">data</span><span class="o">;</span>
    <span class="o">}</span>
</code></pre></div></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="c1">//insert value at index, put value at position index so current item at that index is pointed to the new item at index, index starts at 0</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">insert</span><span class="o">(</span><span class="kt">int</span> <span class="n">index</span><span class="o">,</span> <span class="no">T</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">index</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">index</span> <span class="o">&gt;</span> <span class="n">size</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">IndexOutOfBoundsException</span><span class="o">(</span><span class="s">"Index out of bounds"</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="k">if</span> <span class="o">(</span><span class="n">index</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">push_front</span><span class="o">(</span><span class="n">value</span><span class="o">);</span>
    <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">index</span> <span class="o">==</span> <span class="n">size</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">push_back</span><span class="o">(</span><span class="n">value</span><span class="o">);</span>
    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
        <span class="nc">Node</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">newNode</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Node</span><span class="o">&lt;&gt;(</span><span class="n">value</span><span class="o">);</span>
        <span class="nc">Node</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">current</span> <span class="o">=</span> <span class="n">head</span><span class="o">;</span>

        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">index</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">current</span> <span class="o">=</span> <span class="n">current</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="n">newNode</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">current</span><span class="o">;</span>
        <span class="n">newNode</span><span class="o">.</span><span class="na">prev</span> <span class="o">=</span> <span class="n">current</span><span class="o">.</span><span class="na">prev</span><span class="o">;</span>
        <span class="n">current</span><span class="o">.</span><span class="na">prev</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">newNode</span><span class="o">;</span>
        <span class="n">current</span><span class="o">.</span><span class="na">prev</span> <span class="o">=</span> <span class="n">newNode</span><span class="o">;</span>

        <span class="n">size</span><span class="o">++;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="c1">//remove a node from the list by its position, change the referece of the node that point to them to the reference of next node from the deleted node</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">erase</span><span class="o">(</span><span class="kt">int</span> <span class="n">index</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">index</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">index</span> <span class="o">&gt;=</span> <span class="n">size</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">IndexOutOfBoundsException</span><span class="o">(</span><span class="s">"Index out of bounds"</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="k">if</span> <span class="o">(</span><span class="n">index</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">head</span> <span class="o">==</span> <span class="n">tail</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">head</span> <span class="o">=</span> <span class="n">tail</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                <span class="n">head</span> <span class="o">=</span> <span class="n">head</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
                <span class="n">head</span><span class="o">.</span><span class="na">prev</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">index</span> <span class="o">==</span> <span class="n">size</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">tail</span> <span class="o">=</span> <span class="n">tail</span><span class="o">.</span><span class="na">prev</span><span class="o">;</span>
            <span class="n">tail</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="nc">Node</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">current</span> <span class="o">=</span> <span class="n">head</span><span class="o">;</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">index</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
                <span class="n">current</span> <span class="o">=</span> <span class="n">current</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="n">current</span><span class="o">.</span><span class="na">prev</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">current</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
            <span class="n">current</span><span class="o">.</span><span class="na">next</span><span class="o">.</span><span class="na">prev</span> <span class="o">=</span> <span class="n">current</span><span class="o">.</span><span class="na">prev</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="n">size</span><span class="o">--;</span>
    <span class="o">}</span>
</code></pre></div></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="c1">//search list and return the index that contains the position of the value that matches, index start at 0</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">search</span><span class="o">(</span><span class="no">T</span> <span class="n">value</span><span class="o">){</span>
        <span class="nc">String</span> <span class="n">indexes</span> <span class="o">=</span> <span class="s">""</span><span class="o">;</span>
        <span class="nc">Node</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">current</span> <span class="o">=</span> <span class="n">head</span><span class="o">;</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">size</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">current</span><span class="o">.</span><span class="na">data</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">value</span><span class="o">))</span> <span class="o">{</span>
                <span class="n">indexes</span> <span class="o">=</span> <span class="n">indexes</span> <span class="o">+</span><span class="s">" "</span><span class="o">+</span> <span class="n">i</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="n">current</span> <span class="o">=</span> <span class="n">current</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">indexes</span><span class="o">;</span>
    <span class="o">}</span>
</code></pre></div></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="c1">//empty the list</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">clear</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">head</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
        <span class="n">tail</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
        <span class="n">size</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
    <span class="o">}</span>
</code></pre></div></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="c1">//outputs all value of list</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">String</span> <span class="n">result</span> <span class="o">=</span> <span class="s">"Double Linked List: ["</span><span class="o">;</span>
        <span class="nc">Node</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">current</span> <span class="o">=</span> <span class="n">head</span><span class="o">;</span>

        <span class="k">while</span> <span class="o">(</span><span class="n">current</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">result</span> <span class="o">+=</span> <span class="n">current</span><span class="o">.</span><span class="na">data</span><span class="o">;</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">current</span><span class="o">.</span><span class="na">next</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">result</span> <span class="o">+=</span> <span class="s">" &lt;-&gt; "</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="n">current</span> <span class="o">=</span> <span class="n">current</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="n">result</span> <span class="o">+=</span> <span class="s">"]"</span><span class="o">;</span>
        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<h2 id="testing">Testing</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
            <span class="c1">// test commands</span>
    <span class="o">}</span>

    <span class="c1">//method for testing</span>
    <span class="c1">//print head,tail and the actual list</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">printListInfor</span><span class="o">(</span><span class="nc">DoubleLinkedList</span> <span class="n">list</span><span class="o">){</span>
        <span class="k">if</span> <span class="o">(!</span><span class="n">list</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Front: "</span> <span class="o">+</span> <span class="n">list</span><span class="o">.</span><span class="na">front</span><span class="o">()</span> <span class="o">+</span> <span class="s">" Back: "</span> <span class="o">+</span> <span class="n">list</span><span class="o">.</span><span class="na">back</span><span class="o">());</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"The list is empty."</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Actual list: "</span> <span class="o">+</span> <span class="n">list</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<h3 id="test-size-pushfront-isempty">Test size(), pushFront(), isEmpty()</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">DoubleLinkedList</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">DoubleLinkedList</span><span class="o">&lt;&gt;();</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Is the list empty? "</span> <span class="o">+</span> <span class="n">list</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">());</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"List size: "</span> <span class="o">+</span> <span class="n">list</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>

        <span class="n">list</span><span class="o">.</span><span class="na">pushFront</span><span class="o">(</span><span class="mi">3</span><span class="o">);</span>
        <span class="n">printListInfor</span><span class="o">(</span><span class="n">list</span><span class="o">);</span>

        <span class="n">list</span><span class="o">.</span><span class="na">pushFront</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>
        <span class="n">printListInfor</span><span class="o">(</span><span class="n">list</span><span class="o">);</span>

        <span class="n">list</span><span class="o">.</span><span class="na">pushFront</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
        <span class="n">printListInfor</span><span class="o">(</span><span class="n">list</span><span class="o">);</span>
    <span class="o">}</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Is the list empty? true
List size: 0
           
Front: 3 Back: 3
Actual list: Double Linked List: [3]
        
Front: 2 Back: 3
Actual list: Double Linked List: [2 &lt;-&gt; 3]
         
Front: 1 Back: 3
Actual list: Double Linked List: [1 &lt;-&gt; 2 &lt;-&gt; 3]
</code></pre></div></div>

<h3 id="test-valueatint-index">Test valueAt(int index)</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">printListInfor</span><span class="o">(</span><span class="n">list</span><span class="o">);</span>

<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Value at index 2: "</span> <span class="o">+</span> <span class="n">list</span><span class="o">.</span><span class="na">valueAt</span><span class="o">(</span><span class="mi">2</span><span class="o">));</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Value at index 1: "</span> <span class="o">+</span> <span class="n">list</span><span class="o">.</span><span class="na">valueAt</span><span class="o">(</span><span class="mi">1</span><span class="o">));</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Value at index 0: "</span> <span class="o">+</span> <span class="n">list</span><span class="o">.</span><span class="na">valueAt</span><span class="o">(</span><span class="mi">0</span><span class="o">));</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Value at index -1: "</span> <span class="o">+</span> <span class="n">list</span><span class="o">.</span><span class="na">valueAt</span><span class="o">(-</span><span class="mi">1</span><span class="o">));</span>



</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Front: 1 Back: 3
Actual list: Double Linked List: [1 &lt;-&gt; 2 &lt;-&gt; 3]

Value at index 2: 3
Value at index 1: 2
Value at index 0: 1
Exception in thread "main" java.lang.IndexOutOfBoundsException: Index out of bounds
        at SingleLinkedList.valueAt(Main.java:103)
        at Main.main(Main.java:235)
</code></pre></div></div>

<h3 id="test-popfront">Test popFront()</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">list</span><span class="o">.</span><span class="na">pushFront</span><span class="o">(</span><span class="mi">4</span><span class="o">);</span>
<span class="n">printListInfor</span><span class="o">(</span><span class="n">list</span><span class="o">);</span>

<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Value return by pop front: "</span> <span class="o">+</span> <span class="n">list</span><span class="o">.</span><span class="na">popFront</span><span class="o">());</span>
<span class="n">printListInfor</span><span class="o">(</span><span class="n">list</span><span class="o">);</span>

<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Value return by pop front: "</span> <span class="o">+</span> <span class="n">list</span><span class="o">.</span><span class="na">popFront</span><span class="o">());</span>
<span class="n">printListInfor</span><span class="o">(</span><span class="n">list</span><span class="o">);</span>


<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Value return by pop front: "</span> <span class="o">+</span> <span class="n">list</span><span class="o">.</span><span class="na">popFront</span><span class="o">());</span>
<span class="n">printListInfor</span><span class="o">(</span><span class="n">list</span><span class="o">);</span>


<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Value return by pop front: "</span> <span class="o">+</span> <span class="n">list</span><span class="o">.</span><span class="na">popFront</span><span class="o">());</span>
<span class="n">printListInfor</span><span class="o">(</span><span class="n">list</span><span class="o">);</span>
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Front: 4 Back: 3
Actual list: Double Linked List: [4 &lt;-&gt; 1 &lt;-&gt; 2 &lt;-&gt; 3]

Value return by pop front: 4
Front: 1 Back: 3
Actual list: Double Linked List: [1 &lt;-&gt; 2 &lt;-&gt; 3]

Value return by pop front: 1
Front: 2 Back: 3
Actual list: Double Linked List: [2 &lt;-&gt; 3]

Value return by pop front: 2
Front: 3 Back: 3
Actual list: Double Linked List: [3]

Value return by pop front: 3
The list is empty.
Actual list: Double Linked List: []
</code></pre></div></div>

<h3 id="test-pushback">Test pushBack()</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">printListInfor</span><span class="o">(</span><span class="n">list</span><span class="o">);</span>

<span class="n">list</span><span class="o">.</span><span class="na">pushBack</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
<span class="n">printListInfor</span><span class="o">(</span><span class="n">list</span><span class="o">);</span>

<span class="n">list</span><span class="o">.</span><span class="na">pushBack</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>
<span class="n">printListInfor</span><span class="o">(</span><span class="n">list</span><span class="o">);</span>
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>The list is empty.
Actual list: Double Linked List: []

Front: 1 Back: 1
Actual list: Double Linked List: [1]

Front: 1 Back: 2
Actual list: Double Linked List: [1 &lt;-&gt; 2]
</code></pre></div></div>

<h3 id="test-popback">Test popBack()</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">list</span><span class="o">.</span><span class="na">push_back</span><span class="o">(</span><span class="mi">3</span><span class="o">);</span>
<span class="n">printListInfor</span><span class="o">(</span><span class="n">list</span><span class="o">);</span>

<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Value return by pop back: "</span> <span class="o">+</span> <span class="n">list</span><span class="o">.</span><span class="na">popBack</span><span class="o">());</span>
<span class="n">printListInfor</span><span class="o">(</span><span class="n">list</span><span class="o">);</span>

<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Value return by pop back: "</span> <span class="o">+</span> <span class="n">list</span><span class="o">.</span><span class="na">popBack</span><span class="o">());</span>
<span class="n">printListInfor</span><span class="o">(</span><span class="n">list</span><span class="o">);</span>

<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Value return by pop back: "</span> <span class="o">+</span> <span class="n">list</span><span class="o">.</span><span class="na">popBack</span><span class="o">());</span>
<span class="n">printListInfor</span><span class="o">(</span><span class="n">list</span><span class="o">);</span>

<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Value return by pop back: "</span> <span class="o">+</span> <span class="n">list</span><span class="o">.</span><span class="na">popBack</span><span class="o">());</span>
<span class="n">printListInfor</span><span class="o">(</span><span class="n">list</span><span class="o">);</span>
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Front: 1 Back: 3
Actual list: Double Linked List: [1 &lt;-&gt; 2 &lt;-&gt; 3]

Value return by pop back: 3
Front: 1 Back: 2
Actual list: Double Linked List: [1 &lt;-&gt; 2]

Value return by pop back: 2
Front: 1 Back: 1
Actual list: Double Linked List: [1]

Value return by pop back: 1
The list is empty.
Actual list: Double Linked List: []

Exception in thread "main" java.lang.IllegalStateException: List is empty
        at DoubleLinkedList.popBack(Main.java:86)
        at Main.main(Main.java:243)
</code></pre></div></div>

<h3 id="test-front-back">Test front() back()</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">printListInfor</span><span class="o">(</span><span class="n">list</span><span class="o">);</span>

<span class="n">list</span><span class="o">.</span><span class="na">pushBack</span><span class="o">(</span><span class="mi">3</span><span class="o">);</span>
<span class="n">printListInfor</span><span class="o">(</span><span class="n">list</span><span class="o">);</span>

<span class="n">list</span><span class="o">.</span><span class="na">push_back</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>
<span class="n">printListInfor</span><span class="o">(</span><span class="n">list</span><span class="o">);</span>

<span class="n">list</span><span class="o">.</span><span class="na">push_back</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
<span class="n">printListInfor</span><span class="o">(</span><span class="n">list</span><span class="o">);</span>
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>The list is empty.
Actual list: Double Linked List: []

Front: 3 Back: 3
Actual list: Double Linked List: [3]

Front: 3 Back: 2
Actual list: Double Linked List: [3 &lt;-&gt; 2]

Front: 3 Back: 1
Actual list: Double Linked List: [3 &lt;-&gt; 2 &lt;-&gt; 1]
</code></pre></div></div>

<h2 id="test-insertint-index-t-value">Test insert(int index, T value)</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">list</span><span class="o">.</span><span class="na">clear</span><span class="o">();</span>
<span class="n">printListInfor</span><span class="o">(</span><span class="n">list</span><span class="o">);</span>

<span class="n">list</span><span class="o">.</span><span class="na">insert</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span><span class="mi">1</span><span class="o">);</span>
<span class="n">printListInfor</span><span class="o">(</span><span class="n">list</span><span class="o">);</span>

<span class="n">list</span><span class="o">.</span><span class="na">insert</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="o">);</span>
<span class="n">printListInfor</span><span class="o">(</span><span class="n">list</span><span class="o">);</span>

<span class="n">list</span><span class="o">.</span><span class="na">insert</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span><span class="mi">2</span><span class="o">);</span>
<span class="n">printListInfor</span><span class="o">(</span><span class="n">list</span><span class="o">);</span>

<span class="n">list</span><span class="o">.</span><span class="na">insert</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span><span class="mi">3</span><span class="o">);</span>
<span class="n">printListInfor</span><span class="o">(</span><span class="n">list</span><span class="o">);</span>

<span class="n">list</span><span class="o">.</span><span class="na">insert</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span><span class="mi">4</span><span class="o">);</span>
<span class="n">printListInfor</span><span class="o">(</span><span class="n">list</span><span class="o">);</span>

<span class="n">list</span><span class="o">.</span><span class="na">insert</span><span class="o">(-</span><span class="mi">1</span><span class="o">,</span><span class="mi">1</span><span class="o">);</span>
<span class="n">printListInfor</span><span class="o">(</span><span class="n">list</span><span class="o">);</span>
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Actual list: Double Linked List: []

Front: 1 Back: 1
Actual list: Double Linked List: [1]

Front: 1 Back: 2
Actual list: Double Linked List: [1 &lt;-&gt; 2]

Front: 2 Back: 2
Actual list: Double Linked List: [2 &lt;-&gt; 1 &lt;-&gt; 2]

Front: 3 Back: 2
Actual list: Double Linked List: [3 &lt;-&gt; 2 &lt;-&gt; 1 &lt;-&gt; 2]

Front: 3 Back: 2
Actual list: Double Linked List: [3 &lt;-&gt; 2 &lt;-&gt; 4 &lt;-&gt; 1 &lt;-&gt; 2]

Exception in thread "main" java.lang.IndexOutOfBoundsException: Index out of bounds
        at DoubleLinkedList.insert(Main.java:136)
        at Main.main(Main.java:241)
</code></pre></div></div>

<h3 id="test-eraseindex">Test erase(index)</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">printListInfor</span><span class="o">(</span><span class="n">list</span><span class="o">);</span>

<span class="n">list</span><span class="o">.</span><span class="na">erase</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
<span class="n">printListInfor</span><span class="o">(</span><span class="n">list</span><span class="o">);</span>

<span class="n">list</span><span class="o">.</span><span class="na">erase</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
<span class="n">printListInfor</span><span class="o">(</span><span class="n">list</span><span class="o">);</span>


<span class="n">list</span><span class="o">.</span><span class="na">erase</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>
<span class="n">printListInfor</span><span class="o">(</span><span class="n">list</span><span class="o">);</span>

<span class="n">list</span><span class="o">.</span><span class="na">erase</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
<span class="n">printListInfor</span><span class="o">(</span><span class="n">list</span><span class="o">);</span>

<span class="n">list</span><span class="o">.</span><span class="na">erase</span><span class="o">(</span><span class="mi">3</span><span class="o">);</span>
<span class="n">printListInfor</span><span class="o">(</span><span class="n">list</span><span class="o">);</span>
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Front: 3 Back: 2
Actual list: Double Linked List: [3 &lt;-&gt; 2 &lt;-&gt; 4 &lt;-&gt; 1 &lt;-&gt; 2]

Front: 3 Back: 2
Actual list: Double Linked List: [3 &lt;-&gt; 4 &lt;-&gt; 1 &lt;-&gt; 2]

Front: 4 Back: 2
Actual list: Double Linked List: [4 &lt;-&gt; 1 &lt;-&gt; 2]

Front: 4 Back: 1
Actual list: Double Linked List: [4 &lt;-&gt; 1]

Front: 1 Back: 1
Actual list: Double Linked List: [1]

Exception in thread "main" java.lang.IndexOutOfBoundsException: Index out of bounds
        at DoubleLinkedList.erase(Main.java:159)
</code></pre></div></div>

<h3 id="test-searcht-value">Test search(T value)</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">list</span><span class="o">.</span><span class="na">clear</span><span class="o">();</span>

<span class="n">list</span><span class="o">.</span><span class="na">insert</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span><span class="mi">1</span><span class="o">);</span>

<span class="n">list</span><span class="o">.</span><span class="na">insert</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="o">);</span>

<span class="n">list</span><span class="o">.</span><span class="na">insert</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span><span class="mi">2</span><span class="o">);</span>

<span class="n">list</span><span class="o">.</span><span class="na">insert</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span><span class="mi">3</span><span class="o">);</span>

<span class="n">list</span><span class="o">.</span><span class="na">insert</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span><span class="mi">4</span><span class="o">);</span>

<span class="n">printListInfor</span><span class="o">(</span><span class="n">list</span><span class="o">);</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">list</span><span class="o">.</span><span class="na">search</span><span class="o">(</span><span class="mi">3</span><span class="o">));</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">list</span><span class="o">.</span><span class="na">search</span><span class="o">(</span><span class="mi">2</span><span class="o">));</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">list</span><span class="o">.</span><span class="na">search</span><span class="o">(</span><span class="mi">1</span><span class="o">));</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">list</span><span class="o">.</span><span class="na">search</span><span class="o">(</span><span class="mi">0</span><span class="o">));</span>
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Front: 3 Back: 2
Actual list: Double Linked List: [3 &lt;-&gt; 2 &lt;-&gt; 4 &lt;-&gt; 1 &lt;-&gt; 2]

 0
 1 4
 3 
</code></pre></div></div>]]></content><author><name>Vinh Ng</name><email>vinhintw2014@gmail.com</email></author><summary type="html"><![CDATA[Introduction]]></summary></entry><entry><title type="html">Linked List, Stack, Queue</title><link href="http://localhost:4000/2023/11/01/single-linked-list/" rel="alternate" type="text/html" title="Linked List, Stack, Queue" /><published>2023-11-01T00:00:00+08:00</published><updated>2023-11-01T00:00:00+08:00</updated><id>http://localhost:4000/2023/11/01/single-linked-list</id><content type="html" xml:base="http://localhost:4000/2023/11/01/single-linked-list/"><![CDATA[<h1 id="comparing-array-and-linked-list">Comparing Array and Linked List</h1>
<h3 id="1-array">1. Array</h3>
<p>Fixed size, contain elements of same  data type. 
When array is full, we need to create a new array with double the size and free the memory for former array.
Insertion and deletion make almost all element moved/shifted</p>

<ol>
  <li>Access: read/write element at any position: O(1) - best thing about array</li>
  <li>Insert, worst case is insert at the first position so all elements are shifted: O(n), insert at last position costs O(1)</li>
  <li>Remove, remove first element cost O(n) and remove last element costs O(1)</li>
  <li>Add, when array reaches max size, we need to copy all elements into new array: O(n), when not max size, it costs O(1)</li>
</ol>

<h3 id="2-linked-list">2. Linked list</h3>
<p>Linked list is non-consecutive nodes in memory, each node stores the actual data and the link to the next node (the address of the next node).</p>

<p>Good thing is that each node cost small memory and all nodes doesnt take a long chunk in memory.</p>

<p>Althought the total memory is a bit larger (carry a pointer every element), if data is big, carrying a pointer is not a big deal</p>

<p>First node: Head node, this gives access of completed list
Last node: Does not point to any node. So if we want to access an element in between, we need to start to ask the first node.</p>

<ol>
  <li>Access: O(n)</li>
  <li>Insert O(1), indexing (finding the node) is O(n)</li>
</ol>

<p>Implementation:</p>

<p>These implementations are done individually and independent to each other</p>

<ol>
  <li>size() - returns number of data elements in list - O(n)</li>
  <li>is_empty() - bool returns true if empty - O(1)</li>
  <li>value_at(index) - returns the value of the nth item (starting at 0 for first) O(n)</li>
  <li>push_front(value) - adds an item to the front of the list O(1)</li>
  <li>pop_front() - remove front item and return its value O(1)</li>
  <li>push_back(value) - adds an item at the end O(1)</li>
  <li>pop_back() - removes end item and returns its value O(n)</li>
  <li>front() - get value of front item O(1)</li>
  <li>back() - get value of end item O(1)</li>
  <li>insert(index, value) - insert value at index, so current item at that index is pointed to by new item at index O(n)</li>
  <li>erase(index) - removes node at given index O(n)</li>
  <li>search(value) - return an a list containing the indexes of every items that match the value O(n)</li>
  <li>reverse() - reverses the list, reverse_recursion() - reverse the list using recursion O(n)</li>
  <li>clear() - empty the list O(1)</li>
  <li>search() - search list and return the array that containt the position of the value that matched, index start at 0 O(n)</li>
</ol>

<p><a name="StackQueue"></a></p>
<h3 id="short-note-on-stack-and-queue">Short note on Stack and Queue</h3>
<p>Stack and Queue are abstract data type that has different accesing protocols.</p>

<p>Stack: Imagine a stack of paper. The last piece put into the stack is on the top, so it is the first one to come out. This is LIFO. Adding a piece of paper is called “pushing”, and removing a piece of paper is called “popping”.</p>

<p>Queue: Imagine a queue at the store. The first person in line is the first person to get out of line. This is FIFO. A person getting into line is “enqueued”, and a person getting out of line is “dequeued”.</p>

<p>Enqueue O(1), Dequeue O(1). When implementing with linked list, enqueue (adding data) happens at tail and dequeue (removing data) happens at head. This ensure that no traversal is needed for both operation.</p>

<p>Priority Queue: This can be implemented using linked list, each node store a number that represent the priority of the node.</p>

<div class="imgcap">
	<img style="display: inline-block; width: 90%;" src="/public/post-assets/DataStructure/StackAndQueue/fig1.PNG" width="500" align="center" />
	<div class="thecap">Fig 1: Stack and Queue difference<br /></div>
</div>

<h2 id="implementation">Implementation</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">ListNode</span><span class="p">:</span>
    <span class="sh">"</span><span class="s">ListNode class, each node has data and the reference to the next node</span><span class="sh">"</span>
    
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">data</span> <span class="o">=</span> <span class="n">data</span>
        <span class="n">self</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="bp">None</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">SingleLinkedList</span><span class="p">:</span>
    <span class="sh">"</span><span class="s">class for single linked list: each node contain reference to next node</span><span class="sh">"</span>
    
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="sh">"</span><span class="s">A LinkedList only has first node and last node </span><span class="sh">"</span>
        
        <span class="n">self</span><span class="p">.</span><span class="n">head</span> <span class="o">=</span> <span class="bp">None</span> 
        <span class="n">self</span><span class="p">.</span><span class="n">tail</span> <span class="o">=</span> <span class="bp">None</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">def</span> <span class="nf">size</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="sh">"</span><span class="s">count the number of list items</span><span class="sh">"</span>
        
        <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span> 
        <span class="n">current_node</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">head</span>
        
        <span class="k">while</span> <span class="n">current_node</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="n">current_node</span> <span class="o">=</span> <span class="n">current_node</span><span class="p">.</span><span class="nb">next</span>
        
        <span class="k">return</span> <span class="n">count</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">def</span> <span class="nf">is_empty</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="sh">"</span><span class="s">check if the list is empty or not</span><span class="sh">"</span>
        
        <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">head</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">True</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">False</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">def</span> <span class="nf">value_at</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">index</span><span class="p">):</span>
        <span class="sh">"</span><span class="s">return the value of the nth element, index start at 0</span><span class="sh">"</span>
        
        <span class="n">current_index</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="n">current_node</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">head</span>
        
        <span class="k">while</span> <span class="n">current_node</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">current_index</span> <span class="o">==</span> <span class="n">index</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">current_node</span><span class="p">.</span><span class="n">data</span>
            
            <span class="n">current_index</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="n">current_node</span> <span class="o">=</span> <span class="n">current_node</span><span class="p">.</span><span class="nb">next</span>
            
        <span class="k">return</span> <span class="sh">"</span><span class="s">Error: Index out of range</span><span class="sh">"</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">def</span> <span class="nf">push_front</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
        <span class="sh">"</span><span class="s">push an item to the front of the list</span><span class="sh">"</span>
         
        <span class="c1"># convert data type of item to ListNode data type
</span>        <span class="k">if</span> <span class="ow">not</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="n">ListNode</span><span class="p">):</span>
            <span class="n">value</span> <span class="o">=</span> <span class="nc">ListNode</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
        
        <span class="c1"># when list is empty
</span>        <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">head</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="n">head</span> <span class="o">=</span> <span class="n">value</span>
            <span class="k">return</span> 
        
        <span class="c1"># when list has one element, has to fix tail when add new element
</span>        <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">tail</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="n">tail</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">head</span>
            <span class="n">self</span><span class="p">.</span><span class="n">tail</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="bp">None</span>
            <span class="n">self</span><span class="p">.</span><span class="n">head</span> <span class="o">=</span> <span class="n">value</span>
            <span class="n">value</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">tail</span>
            <span class="k">return</span>
        
        <span class="c1"># when list has at least 2 element
</span>        <span class="n">value</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">head</span>
        <span class="n">self</span><span class="p">.</span><span class="n">head</span> <span class="o">=</span> <span class="n">value</span> 
        
        <span class="k">return</span> 
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">def</span> <span class="nf">pop_front</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="sh">"</span><span class="s">remove front item and return its value</span><span class="sh">"</span>
        
        <span class="c1"># when list is empty, return None, list remains unchanged
</span>        <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">head</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">None</span>
        
        <span class="c1"># when list has 1 item, return head value and remove head of list
</span>        <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">tail</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">head_value</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">head</span><span class="p">.</span><span class="n">data</span>
            <span class="n">self</span><span class="p">.</span><span class="n">head</span> <span class="o">=</span> <span class="bp">None</span>
            <span class="k">return</span> <span class="n">head_value</span>
        
        <span class="c1"># when list has 2 items, return head value and remove head from list
</span>        <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">head</span><span class="p">.</span><span class="nb">next</span> <span class="ow">is</span> <span class="n">self</span><span class="p">.</span><span class="n">tail</span><span class="p">:</span>
            <span class="n">head_value</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">head</span><span class="p">.</span><span class="n">data</span>
            <span class="n">self</span><span class="p">.</span><span class="n">head</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">tail</span>
            <span class="n">self</span><span class="p">.</span><span class="n">head</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="bp">None</span>
            <span class="n">self</span><span class="p">.</span><span class="n">tail</span> <span class="o">=</span> <span class="bp">None</span>
            <span class="k">return</span> <span class="n">head_value</span>
        
        <span class="c1"># when list has 3 items
</span>        <span class="n">head_value</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">head</span><span class="p">.</span><span class="n">data</span>
            
        <span class="c1"># change head position of linked list
</span>        <span class="n">self</span><span class="p">.</span><span class="n">head</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">head</span><span class="p">.</span><span class="nb">next</span>
        
        <span class="k">return</span> <span class="n">head_value</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">def</span> <span class="nf">push_back</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">item</span><span class="p">):</span>
        <span class="sh">"</span><span class="s">add item to end of list</span><span class="sh">"</span>
        
        <span class="c1"># convert data type of item to ListNode data type
</span>        <span class="k">if</span> <span class="ow">not</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="n">ListNode</span><span class="p">):</span>
            <span class="n">item</span> <span class="o">=</span> <span class="nc">ListNode</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
        
        <span class="c1"># when list is empty then the value being added becomes head, otherwise it becomes 
</span>        <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">head</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="n">head</span> <span class="o">=</span> <span class="n">item</span>
            <span class="k">return</span>
        <span class="c1"># when list has 1 item
</span>        <span class="k">elif</span> <span class="n">self</span><span class="p">.</span><span class="n">tail</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="n">tail</span> <span class="o">=</span> <span class="n">item</span>
            <span class="n">self</span><span class="p">.</span><span class="n">head</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">item</span>
            <span class="k">return</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="n">tail</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">item</span>
            <span class="n">self</span><span class="p">.</span><span class="n">tail</span> <span class="o">=</span> <span class="n">item</span> 
            <span class="k">return</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">def</span> <span class="nf">pop_back</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="sh">"</span><span class="s">removes end item and returns its value</span><span class="sh">"</span>
        
        <span class="c1"># edge case
</span>        <span class="c1"># when list is empty
</span>        <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">head</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="n">head</span> <span class="o">=</span> <span class="bp">None</span>
            <span class="k">return</span> <span class="bp">None</span>
        
        <span class="c1"># when list has 1 item, head is the last element
</span>        <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">tail</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">head_value</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">head</span><span class="p">.</span><span class="n">data</span>
            <span class="n">self</span><span class="p">.</span><span class="n">head</span> <span class="o">=</span> <span class="bp">None</span>
            <span class="k">return</span> <span class="n">head_value</span>
        
        <span class="c1"># when list has 2 items, remove tail and return it
</span>        <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">head</span><span class="p">.</span><span class="nb">next</span> <span class="ow">is</span> <span class="n">self</span><span class="p">.</span><span class="n">tail</span><span class="p">:</span>
            <span class="n">tail_value</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">tail</span><span class="p">.</span><span class="n">data</span>
            <span class="n">self</span><span class="p">.</span><span class="n">tail</span> <span class="o">=</span> <span class="bp">None</span>
            <span class="n">self</span><span class="p">.</span><span class="n">head</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="bp">None</span>
            <span class="k">return</span> <span class="n">tail_value</span>
        
        <span class="c1"># when list has at least 3 items
</span>        <span class="n">previous_node</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="n">current_node</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">head</span>
        
        <span class="c1"># traverse the whole list to get the last node
</span>        <span class="k">while</span> <span class="n">current_node</span><span class="p">.</span><span class="nb">next</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">previous_node</span> <span class="o">=</span> <span class="n">current_node</span>
            <span class="n">current_node</span> <span class="o">=</span> <span class="n">current_node</span><span class="p">.</span><span class="nb">next</span>
        
        <span class="n">tail_value</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">tail</span><span class="p">.</span><span class="n">data</span>
        
        <span class="c1"># current_node.next is none when current_node is the last node
</span>        <span class="n">self</span><span class="p">.</span><span class="n">tail</span> <span class="o">=</span> <span class="n">previous_node</span>
        <span class="n">previous_node</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="bp">None</span>
            
        <span class="k">return</span> <span class="n">tail_value</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">def</span> <span class="nf">front</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="sh">"</span><span class="s">get value of front item</span><span class="sh">"</span>
        
        <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">head</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">None</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">head</span><span class="p">.</span><span class="n">data</span>
    
    <span class="k">def</span> <span class="nf">back</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="sh">"</span><span class="s">get value of end item</span><span class="sh">"</span>
        
        <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">tail</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">None</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">tail</span><span class="p">.</span><span class="n">data</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">def</span> <span class="nf">insert</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">index</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
        <span class="sh">"</span><span class="s">insert value at index, put value at position index so current item at that index is pointed to the new item at index, index starts at 0</span><span class="sh">"</span>
        
        <span class="n">success_msg</span> <span class="o">=</span> <span class="sh">"</span><span class="s">Node inserted succesfully at index %s</span><span class="sh">"</span> <span class="o">%</span> <span class="n">index</span>
        <span class="n">fail_msg</span> <span class="o">=</span> <span class="sh">"</span><span class="s">Error: index %s out of range, unable to insert</span><span class="sh">"</span> <span class="o">%</span> <span class="n">index</span>
        
        <span class="c1"># convert value to ListNode type if not already
</span>        <span class="k">if</span> <span class="ow">not</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="n">ListNode</span><span class="p">):</span>
            <span class="n">value</span> <span class="o">=</span> <span class="nc">ListNode</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
        
        <span class="c1"># edge case: list is empty, there will be no next node
</span>        <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">head</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">index</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                <span class="n">self</span><span class="p">.</span><span class="n">head</span> <span class="o">=</span> <span class="n">value</span>
                <span class="k">return</span> <span class="n">success_msg</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">fail_msg</span>
        
        <span class="c1"># when list has 1 item, we have to fix tail
</span>        <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">tail</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span> 
            <span class="c1"># insert to head
</span>            <span class="k">if</span> <span class="n">index</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                <span class="n">self</span><span class="p">.</span><span class="n">tail</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">head</span>
                <span class="n">self</span><span class="p">.</span><span class="n">head</span> <span class="o">=</span> <span class="n">value</span>
                <span class="n">value</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">tail</span>
                <span class="k">return</span> <span class="n">success_msg</span>
            
            <span class="c1"># insert to tail
</span>            <span class="k">if</span> <span class="n">index</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
                <span class="n">self</span><span class="p">.</span><span class="n">tail</span> <span class="o">=</span> <span class="n">value</span>
                <span class="n">self</span><span class="p">.</span><span class="n">head</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">value</span>
                <span class="k">return</span> <span class="n">success_msg</span>
        
        <span class="c1"># when list has at least 2 items, put value in the position index 
</span>        <span class="n">current_index</span> <span class="o">=</span> <span class="mi">0</span> 

        <span class="n">previous_node</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="n">current_node</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">head</span>
        
        <span class="k">while</span> <span class="n">current_node</span><span class="p">.</span><span class="nb">next</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="c1"># insert to head
</span>            <span class="k">if</span> <span class="n">index</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                <span class="n">value</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">head</span>
                <span class="n">self</span><span class="p">.</span><span class="n">head</span> <span class="o">=</span> <span class="n">value</span>
                <span class="k">return</span> <span class="n">success_msg</span>
            
            <span class="c1"># insert to the middle of the list
</span>            <span class="k">if</span> <span class="n">current_index</span> <span class="o">==</span> <span class="n">index</span><span class="p">:</span>
                <span class="c1"># insert new node
</span>                <span class="n">previous_node</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">value</span>
                <span class="n">value</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">current_node</span>
                <span class="k">return</span> <span class="n">success_msg</span>
            
            <span class="c1"># increment index
</span>            <span class="n">current_index</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="n">previous_node</span> <span class="o">=</span> <span class="n">current_node</span>
            <span class="n">current_node</span> <span class="o">=</span> <span class="n">current_node</span><span class="p">.</span><span class="nb">next</span>
            
        <span class="c1"># when current_node.next is none, it mean we have traversed the whole list insert to tail
</span>        <span class="k">if</span> <span class="n">current_node</span><span class="p">.</span><span class="nb">next</span> <span class="ow">is</span> <span class="bp">None</span> <span class="ow">and</span> <span class="n">current_index</span> <span class="o">==</span> <span class="n">index</span><span class="p">:</span>
            <span class="n">current_node</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">value</span>
            <span class="n">self</span><span class="p">.</span><span class="n">tail</span> <span class="o">=</span> <span class="n">value</span>
            <span class="k">return</span> <span class="n">success_msg</span>
        
        <span class="k">return</span> <span class="n">fail_msg</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">def</span> <span class="nf">print</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="sh">"</span><span class="s">outputs all value of list</span><span class="sh">"</span>
        
        <span class="n">current_node</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">head</span>
        
        <span class="k">while</span> <span class="n">current_node</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="nf">print</span><span class="p">(</span><span class="n">current_node</span><span class="p">.</span><span class="n">data</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="sh">'</span><span class="s"> </span><span class="sh">'</span><span class="p">)</span>
            <span class="n">current_node</span> <span class="o">=</span> <span class="n">current_node</span><span class="p">.</span><span class="nb">next</span>
        
        <span class="nf">print</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">def</span> <span class="nf">erase</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">index</span><span class="p">):</span>
        <span class="sh">"</span><span class="s">remove a node from the list by its position, change the referece of the node that point to them to the reference of next node from the deleted node, unrefereced data will be taken by python garbage collector</span><span class="sh">"</span>
        
        <span class="n">success_msg</span> <span class="o">=</span> <span class="sh">"</span><span class="s">Node deleted successfully at index %s</span><span class="sh">"</span> <span class="o">%</span> <span class="n">index</span>
        <span class="n">fail_msg</span> <span class="o">=</span> <span class="sh">"</span><span class="s">Error: index %s out of range, unable to delete</span><span class="sh">"</span> <span class="o">%</span><span class="n">index</span>
        
        <span class="c1"># When list is empty 
</span>        <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">head</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">fail_msg</span>
        
        <span class="c1"># When list has 1 item
</span>        <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">tail</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">index</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                <span class="n">self</span><span class="p">.</span><span class="n">head</span> <span class="o">=</span> <span class="bp">None</span>
                <span class="k">return</span> <span class="n">success_msg</span>
        
        <span class="c1"># When list has 2 items, has to remove tail
</span>        <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">head</span><span class="p">.</span><span class="nb">next</span> <span class="ow">is</span> <span class="n">self</span><span class="p">.</span><span class="n">tail</span><span class="p">:</span>
            <span class="c1"># when erase head
</span>            <span class="k">if</span> <span class="n">index</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                <span class="n">self</span><span class="p">.</span><span class="n">head</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">tail</span>
                <span class="n">self</span><span class="p">.</span><span class="n">head</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="bp">None</span>
                <span class="n">self</span><span class="p">.</span><span class="n">tail</span> <span class="o">=</span> <span class="bp">None</span>
                <span class="k">return</span> <span class="n">success_msg</span>
            <span class="c1"># when erase tail
</span>            <span class="k">if</span> <span class="n">index</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
                <span class="n">self</span><span class="p">.</span><span class="n">tail</span> <span class="o">=</span> <span class="bp">None</span>
                <span class="n">self</span><span class="p">.</span><span class="n">head</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="bp">None</span>
                <span class="k">return</span> <span class="n">success_msg</span>
            
            <span class="k">return</span> <span class="n">fail_msg</span>
        
        <span class="c1"># when list has at least 3 items
</span>        
        <span class="n">current_index</span> <span class="o">=</span> <span class="mi">0</span>
        
        <span class="n">previous_node</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="n">current_node</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">head</span>
        
        <span class="k">while</span> <span class="n">current_node</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">current_index</span> <span class="o">==</span> <span class="n">index</span><span class="p">:</span> 
                
                <span class="c1"># when erase the first node
</span>                <span class="k">if</span> <span class="n">previous_node</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span> <span class="c1"># if current_node is head
</span>        
                    <span class="c1"># when erase first node, the second node become the head
</span>                    <span class="n">self</span><span class="p">.</span><span class="n">head</span> <span class="o">=</span> <span class="n">current_node</span><span class="p">.</span><span class="nb">next</span>
                
                    <span class="c1"># remove the current node to free memory
</span>                    <span class="n">current_node</span> <span class="o">=</span> <span class="bp">None</span>
                    
                    <span class="k">return</span> <span class="n">success_msg</span>
                
                <span class="c1"># when erase last node
</span>                <span class="k">if</span> <span class="n">current_node</span><span class="p">.</span><span class="nb">next</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span> <span class="c1"># if current_node is tail
</span>                    <span class="n">previous_node</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="bp">None</span> <span class="c1"># current_node will be collected by python garbage collector
</span>                    <span class="n">self</span><span class="p">.</span><span class="n">tail</span> <span class="o">=</span> <span class="n">previous_node</span>
                    <span class="k">return</span> <span class="n">success_msg</span>
                    
                <span class="c1"># when erase a node in the middle of the list, change reference of the node before the one being deleted
</span>                <span class="n">previous_node</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">current_node</span><span class="p">.</span><span class="nb">next</span>
                
                <span class="k">return</span> <span class="n">success_msg</span>
            
            <span class="n">current_index</span> <span class="o">+=</span><span class="mi">1</span>
            <span class="n">previous_node</span> <span class="o">=</span> <span class="n">current_node</span>
            <span class="n">current_node</span> <span class="o">=</span> <span class="n">current_node</span><span class="p">.</span><span class="nb">next</span>
        
        <span class="k">return</span> <span class="n">fail_msg</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">def</span> <span class="nf">search</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
        <span class="sh">"</span><span class="s">search list and return the array that containt the position of the value that matched, index start at 0</span><span class="sh">"</span>
        
        <span class="n">results</span> <span class="o">=</span> <span class="p">[]</span> 
        
        <span class="n">index</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="n">current_node</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">head</span>
        
        <span class="k">while</span> <span class="n">current_node</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            
            <span class="k">if</span> <span class="n">current_node</span><span class="p">.</span><span class="n">data</span> <span class="o">==</span> <span class="n">value</span><span class="p">:</span>
                <span class="n">results</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">index</span><span class="p">)</span>
                
            <span class="n">index</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="n">current_node</span> <span class="o">=</span> <span class="n">current_node</span><span class="p">.</span><span class="nb">next</span>
            
        <span class="k">return</span> <span class="n">results</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">def</span> <span class="nf">reverse</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="sh">"</span><span class="s">reverse the referencing order of linked list using iterative method</span><span class="sh">"</span>
        
        <span class="n">previous_node</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="n">current_node</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">head</span>
        
        <span class="n">self</span><span class="p">.</span><span class="n">tail</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">head</span>
        
        <span class="k">while</span> <span class="n">current_node</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            
            <span class="c1"># store next node because the pointer to the next node will be change after that
</span>            <span class="n">next_node</span> <span class="o">=</span> <span class="n">current_node</span><span class="p">.</span><span class="nb">next</span>
            
            <span class="c1"># change pointer of each node to the previous node
</span>            <span class="n">current_node</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">previous_node</span>
            
            <span class="c1"># shift the position of current and previous node
</span>            <span class="n">previous_node</span> <span class="o">=</span> <span class="n">current_node</span>
            <span class="n">current_node</span> <span class="o">=</span> <span class="n">next_node</span>
        
        <span class="c1"># previous node is the last node, make it the head of single linked list
</span>        <span class="n">self</span><span class="p">.</span><span class="n">head</span> <span class="o">=</span> <span class="n">previous_node</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">def</span> <span class="nf">reverse_recursion</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">head</span><span class="p">):</span>
        <span class="sh">"</span><span class="s">reverse a linked list using recursion method given the head node</span><span class="sh">"</span>
        
        <span class="c1"># cannot use self.head instead of head because head is updated in recursion while self.head is a fixed value, self doesn't change
</span>        
        <span class="n">self</span><span class="p">.</span><span class="n">tail</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">head</span>
        <span class="n">current_node</span> <span class="o">=</span> <span class="n">head</span>
        <span class="n">rest</span> <span class="o">=</span> <span class="n">current_node</span><span class="p">.</span><span class="nb">next</span>
        
        <span class="k">if</span> <span class="n">rest</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="c1"># rest is null when current_node is the last node of the list
</span>            <span class="n">self</span><span class="p">.</span><span class="n">tail</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">head</span>
            <span class="n">self</span><span class="p">.</span><span class="n">head</span> <span class="o">=</span> <span class="n">current_node</span>
            <span class="k">return</span> 
        
        <span class="n">self</span><span class="p">.</span><span class="nf">reverse_recursion</span><span class="p">(</span><span class="n">rest</span><span class="p">)</span>
        
        <span class="c1"># create a reverse the link between current_node and the next node of it
</span>        <span class="n">current_node</span><span class="p">.</span><span class="nb">next</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">current_node</span>
        
        <span class="c1"># remove the the original link
</span>        <span class="n">current_node</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="bp">None</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="k">def</span> <span class="nf">clear</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="sh">"</span><span class="s">empty the list, python garbage collector will clear unreferenced memory</span><span class="sh">"</span>
        <span class="n">self</span><span class="p">.</span><span class="n">head</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="n">self</span><span class="p">.</span><span class="n">tail</span> <span class="o">=</span> <span class="bp">None</span>
</code></pre></div></div>

<h2 id="testing">Testing</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># function for testing
</span>
<span class="k">def</span> <span class="nf">print_list_infor</span><span class="p">(</span><span class="nb">list</span><span class="p">):</span>
    <span class="sh">"</span><span class="s">print head,tail and the actual list</span><span class="sh">"</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Front: %s, Back: %s</span><span class="sh">"</span> <span class="o">%</span> <span class="p">(</span><span class="nb">list</span><span class="p">.</span><span class="nf">front</span><span class="p">(),</span> <span class="nb">list</span><span class="p">.</span><span class="nf">back</span><span class="p">()))</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Actual list: </span><span class="sh">"</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="sh">""</span><span class="p">)</span>
    <span class="nb">list</span><span class="p">.</span><span class="nf">print</span><span class="p">()</span>
    <span class="nf">print</span><span class="p">()</span>

</code></pre></div></div>

<h3 id="test-size-push_front-is_empty">Test size(), push_front(), is_empty()</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">list</span> <span class="o">=</span> <span class="nc">SingleLinkedList</span><span class="p">()</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Size of empty list: %s</span><span class="sh">"</span> <span class="o">%</span> <span class="nb">list</span><span class="p">.</span><span class="nf">size</span><span class="p">(),</span> <span class="n">end</span> <span class="o">=</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Is empty value: %s</span><span class="sh">"</span> <span class="o">%</span> <span class="nb">list</span><span class="p">.</span><span class="nf">is_empty</span><span class="p">())</span>
<span class="nf">print</span><span class="p">()</span>

<span class="nb">list</span><span class="p">.</span><span class="nf">push_front</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
<span class="nf">print_list_infor</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>

<span class="nb">list</span><span class="p">.</span><span class="nf">push_front</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="nf">print_list_infor</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>


<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">List size: %s, actual list: </span><span class="sh">"</span> <span class="o">%</span> <span class="nb">list</span><span class="p">.</span><span class="nf">size</span><span class="p">(),</span> <span class="n">end</span> <span class="o">=</span> <span class="sh">""</span><span class="p">)</span>
<span class="nb">list</span><span class="p">.</span><span class="nf">print</span><span class="p">()</span>

</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Size of empty list: 0
Is empty value: True

Front: 2, Back: None
Actual list: 2 

Front: 1, Back: 2
Actual list: 1 2 

List size: 2, actual list: 1 2 
</code></pre></div></div>

<h3 id="test-value_at">Test value_at()</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">print_list_infor</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>

<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Value at index -1: %s</span><span class="sh">"</span> <span class="o">%</span> <span class="nb">list</span><span class="p">.</span><span class="nf">value_at</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">))</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Value at index 0: %s</span><span class="sh">"</span> <span class="o">%</span> <span class="nb">list</span><span class="p">.</span><span class="nf">value_at</span><span class="p">(</span><span class="mi">0</span><span class="p">))</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Value at index 1: %s</span><span class="sh">"</span> <span class="o">%</span> <span class="nb">list</span><span class="p">.</span><span class="nf">value_at</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Value at index 2: %s</span><span class="sh">"</span> <span class="o">%</span> <span class="nb">list</span><span class="p">.</span><span class="nf">value_at</span><span class="p">(</span><span class="mi">2</span><span class="p">))</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Front: 1, Back: 2
Actual list: 1 2 

Value at index -1: Error: Index out of range
Value at index 0: 1
Value at index 1: 2
Value at index 2: Error: Index out of range
</code></pre></div></div>

<h3 id="test-pop_front">Test pop_front()</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">list</span><span class="p">.</span><span class="nf">push_front</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
<span class="nf">print_list_infor</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>


<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Value return by pop front: %s</span><span class="sh">"</span> <span class="o">%</span> <span class="nb">list</span><span class="p">.</span><span class="nf">pop_front</span><span class="p">())</span>
<span class="nf">print_list_infor</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>


<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Value return by pop front: %s</span><span class="sh">"</span> <span class="o">%</span> <span class="nb">list</span><span class="p">.</span><span class="nf">pop_front</span><span class="p">())</span>
<span class="nf">print_list_infor</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>

<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Value return by pop front: %s</span><span class="sh">"</span> <span class="o">%</span> <span class="nb">list</span><span class="p">.</span><span class="nf">pop_front</span><span class="p">())</span>
<span class="nf">print_list_infor</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>


<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Value return by pop front: %s</span><span class="sh">"</span> <span class="o">%</span> <span class="nb">list</span><span class="p">.</span><span class="nf">pop_front</span><span class="p">())</span>
<span class="nf">print_list_infor</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Front: 3, Back: 2
Actual list: 3 1 2 

Value return by pop front: 3
Front: 1, Back: 2
Actual list: 1 2 

Value return by pop front: 1
Front: 2, Back: None
Actual list: 2 

Value return by pop front: 2
Front: None, Back: None
Actual list: 

Value return by pop front: None
Front: None, Back: None
Actual list: 
</code></pre></div></div>

<h3 id="test-push_back">Test push_back()</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Actual list: </span><span class="sh">"</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="sh">""</span><span class="p">)</span>
<span class="nf">print_list_infor</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>

<span class="nb">list</span><span class="p">.</span><span class="nf">push_back</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="nf">print_list_infor</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>

<span class="nb">list</span><span class="p">.</span><span class="nf">push_back</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
<span class="nf">print_list_infor</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Actual list: Front: None, Back: None
Actual list: 

Front: 1, Back: None
Actual list: 1 

Front: 1, Back: 2
Actual list: 1 2 
</code></pre></div></div>

<h3 id="test-pop_back">Test pop_back()</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">list</span><span class="p">.</span><span class="nf">push_back</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
<span class="nf">print_list_infor</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>

<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Value return by pop back: %s</span><span class="sh">"</span> <span class="o">%</span> <span class="nb">list</span><span class="p">.</span><span class="nf">pop_back</span><span class="p">())</span>
<span class="nf">print_list_infor</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>

<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Value return by pop back: %s</span><span class="sh">"</span> <span class="o">%</span> <span class="nb">list</span><span class="p">.</span><span class="nf">pop_back</span><span class="p">())</span>
<span class="nf">print_list_infor</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>

<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Value return by pop back: %s</span><span class="sh">"</span> <span class="o">%</span> <span class="nb">list</span><span class="p">.</span><span class="nf">pop_back</span><span class="p">())</span>
<span class="nf">print_list_infor</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>

<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Value return by pop back: %s</span><span class="sh">"</span> <span class="o">%</span> <span class="nb">list</span><span class="p">.</span><span class="nf">pop_back</span><span class="p">())</span>
<span class="nf">print_list_infor</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Front: 1, Back: 3
Actual list: 1 2 3 

Value return by pop back: 3
Front: 1, Back: 2
Actual list: 1 2 

Value return by pop back: 2
Front: 1, Back: None
Actual list: 1 

Value return by pop back: 1
Front: None, Back: None
Actual list: 

Value return by pop back: None
Front: None, Back: None
Actual list: 
</code></pre></div></div>

<h3 id="test-front-back">Test front() back()</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Front: %s, Back: %s</span><span class="sh">"</span> <span class="o">%</span> <span class="p">(</span><span class="nb">list</span><span class="p">.</span><span class="nf">front</span><span class="p">(),</span> <span class="nb">list</span><span class="p">.</span><span class="nf">back</span><span class="p">()))</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Actual list: </span><span class="sh">"</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="sh">""</span><span class="p">)</span>
<span class="nb">list</span><span class="p">.</span><span class="nf">print</span><span class="p">()</span>
<span class="nf">print</span><span class="p">()</span>

<span class="nb">list</span><span class="p">.</span><span class="nf">push_back</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Actual list: </span><span class="sh">"</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="sh">""</span><span class="p">)</span>
<span class="nb">list</span><span class="p">.</span><span class="nf">print</span><span class="p">()</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Front: %s, Back: %s</span><span class="sh">"</span> <span class="o">%</span> <span class="p">(</span><span class="nb">list</span><span class="p">.</span><span class="nf">front</span><span class="p">(),</span> <span class="nb">list</span><span class="p">.</span><span class="nf">back</span><span class="p">()))</span>
<span class="nf">print</span><span class="p">()</span>

<span class="nb">list</span><span class="p">.</span><span class="nf">push_back</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Actual list: </span><span class="sh">"</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="sh">""</span><span class="p">)</span>
<span class="nb">list</span><span class="p">.</span><span class="nf">print</span><span class="p">()</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Front: %s, Back: %s</span><span class="sh">"</span> <span class="o">%</span> <span class="p">(</span><span class="nb">list</span><span class="p">.</span><span class="nf">front</span><span class="p">(),</span> <span class="nb">list</span><span class="p">.</span><span class="nf">back</span><span class="p">()))</span>
<span class="nf">print</span><span class="p">()</span>

<span class="nb">list</span><span class="p">.</span><span class="nf">push_back</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Actual list: </span><span class="sh">"</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="sh">""</span><span class="p">)</span>
<span class="nb">list</span><span class="p">.</span><span class="nf">print</span><span class="p">()</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Front: %s, Back: %s</span><span class="sh">"</span> <span class="o">%</span> <span class="p">(</span><span class="nb">list</span><span class="p">.</span><span class="nf">front</span><span class="p">(),</span> <span class="nb">list</span><span class="p">.</span><span class="nf">back</span><span class="p">()))</span>
<span class="nf">print</span><span class="p">()</span>

</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Front: None, Back: None
Actual list: 

Actual list: 3 
Front: 3, Back: None

Actual list: 3 2 
Front: 3, Back: 2

Actual list: 3 2 1 
Front: 3, Back: 1
</code></pre></div></div>

<h2 id="test-insertindexvalue">Test insert(index,value)</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">list</span><span class="p">.</span><span class="nf">clear</span><span class="p">()</span>
<span class="nf">print_list_infor</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>

<span class="nf">print</span><span class="p">(</span><span class="nb">list</span><span class="p">.</span><span class="nf">insert</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">))</span>
<span class="nf">print_list_infor</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>

<span class="nf">print</span><span class="p">(</span><span class="nb">list</span><span class="p">.</span><span class="nf">insert</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">))</span>
<span class="nf">print_list_infor</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>

<span class="nf">print</span><span class="p">(</span><span class="nb">list</span><span class="p">.</span><span class="nf">insert</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">))</span>
<span class="nf">print_list_infor</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>

<span class="nf">print</span><span class="p">(</span><span class="nb">list</span><span class="p">.</span><span class="nf">insert</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">))</span>
<span class="nf">print_list_infor</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>

<span class="nf">print</span><span class="p">(</span><span class="nb">list</span><span class="p">.</span><span class="nf">insert</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="p">))</span>
<span class="nf">print_list_infor</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>

<span class="nf">print</span><span class="p">(</span><span class="nb">list</span><span class="p">.</span><span class="nf">insert</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">3</span><span class="p">))</span>
<span class="nf">print_list_infor</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>

<span class="nf">print</span><span class="p">(</span><span class="nb">list</span><span class="p">.</span><span class="nf">insert</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">))</span>
<span class="nf">print_list_infor</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Front: None, Back: None
Actual list: 

Error: index -1 out of range, unable to insert
Front: None, Back: None
Actual list: 

Error: index 1 out of range, unable to insert
Front: None, Back: None
Actual list: 

Node inserted succesfully at index 0
Front: 1, Back: None
Actual list: 1 

Node inserted succesfully at index 1
Front: 1, Back: 2
Actual list: 1 2 

Node inserted succesfully at index 0
Front: 2, Back: 2
Actual list: 2 1 2 

Node inserted succesfully at index 0
Front: 3, Back: 2
Actual list: 3 2 1 2 

Node inserted succesfully at index 2
Front: 3, Back: 2
Actual list: 3 2 4 1 2 
</code></pre></div></div>

<h3 id="test-eraseindex">Test erase(index)</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Actual list: </span><span class="sh">"</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="sh">""</span><span class="p">)</span>
<span class="nf">print_list_infor</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>

<span class="nf">print</span><span class="p">(</span><span class="nb">list</span><span class="p">.</span><span class="nf">erase</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span>
<span class="nf">print_list_infor</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>

<span class="nf">print</span><span class="p">(</span><span class="nb">list</span><span class="p">.</span><span class="nf">erase</span><span class="p">(</span><span class="mi">0</span><span class="p">))</span>
<span class="nf">print_list_infor</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>

<span class="nf">print</span><span class="p">(</span><span class="nb">list</span><span class="p">.</span><span class="nf">erase</span><span class="p">(</span><span class="mi">3</span><span class="p">))</span>
<span class="nf">print_list_infor</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>

<span class="nf">print</span><span class="p">(</span><span class="nb">list</span><span class="p">.</span><span class="nf">erase</span><span class="p">(</span><span class="mi">2</span><span class="p">))</span>
<span class="nf">print_list_infor</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>

<span class="nf">print</span><span class="p">(</span><span class="nb">list</span><span class="p">.</span><span class="nf">erase</span><span class="p">(</span><span class="mi">0</span><span class="p">))</span>
<span class="nf">print_list_infor</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>

<span class="nf">print</span><span class="p">(</span><span class="nb">list</span><span class="p">.</span><span class="nf">erase</span><span class="p">(</span><span class="mi">0</span><span class="p">))</span>
<span class="nf">print_list_infor</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Actual list: Front: 3, Back: 2
Actual list: 3 2 4 1 2 

Node deleted successfully at index 1
Front: 3, Back: 2
Actual list: 3 4 1 2 

Node deleted successfully at index 0
Front: 4, Back: 2
Actual list: 4 1 2 

Error: index 3 out of range, unable to delete
Front: 4, Back: 2
Actual list: 4 1 2 

Node deleted successfully at index 2
Front: 4, Back: 1
Actual list: 4 1 

Node deleted successfully at index 0
Front: 1, Back: None
Actual list: 1 

Node deleted successfully at index 0
Front: None, Back: None
Actual list: 
</code></pre></div></div>

<h3 id="test-reverse-reverse_recursion">Test reverse(), reverse_recursion()</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">list</span><span class="p">.</span><span class="nf">push_front</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="nb">list</span><span class="p">.</span><span class="nf">push_front</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
<span class="nb">list</span><span class="p">.</span><span class="nf">push_front</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
<span class="nb">list</span><span class="p">.</span><span class="nf">push_front</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>

<span class="nf">print_list_infor</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>

<span class="nb">list</span><span class="p">.</span><span class="nf">reverse</span><span class="p">()</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">List reversing...</span><span class="sh">"</span><span class="p">)</span>
<span class="nf">print_list_infor</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>

<span class="nb">list</span><span class="p">.</span><span class="nf">reverse_recursion</span><span class="p">(</span><span class="nb">list</span><span class="p">.</span><span class="n">head</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">List reversing...</span><span class="sh">"</span><span class="p">)</span>
<span class="nf">print_list_infor</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Front: 5, Back: 1
Actual list: 5 4 3 1 

List reversing...
Front: 1, Back: 5
Actual list: 1 3 4 5 

List reversing...
Front: 5, Back: 1
Actual list: 5 4 3 1 
</code></pre></div></div>]]></content><author><name>Vinh Ng</name><email>vinhintw2014@gmail.com</email></author><summary type="html"><![CDATA[Comparing Array and Linked List 1. Array Fixed size, contain elements of same data type. When array is full, we need to create a new array with double the size and free the memory for former array. Insertion and deletion make almost all element moved/shifted]]></summary></entry></feed>